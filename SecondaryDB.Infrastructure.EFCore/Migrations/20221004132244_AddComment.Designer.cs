// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecondaryDB.Infrastructure.EFCore;

#nullable disable

namespace EShopQuery.Migrations
{
    [DbContext(typeof(SecondaryDBEfCoreContext))]
    [Migration("20221004132244_AddComment")]
    partial class AddComment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SecondaryDB.Domain.CustomerDiscountQueryAgg.CustomerDiscountQuery", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CustomerDiscountQueries");
                });

            modelBuilder.Entity("SecondaryDB.Domain.InventoryQueryAgg.InventoryOperationQuery", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<long>("CurrentCount")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("InventoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InventoryOperationQueryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("OperatorId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("InventoryOperationQueryId");

                    b.ToTable("InventoryOperationQueries");
                });

            modelBuilder.Entity("SecondaryDB.Domain.InventoryQueryAgg.InventoryQuery", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrentCount")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("InventoryQueries");
                });

            modelBuilder.Entity("SecondaryDB.Domain.ProductCategoryQueryAgg.ProductCategoryQuery", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PictureAlt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PictureTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategoryQueries");
                });

            modelBuilder.Entity("SecondaryDB.Domain.ProductCommentQueryAgg.ProductCommentQuery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ConfirmedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("ProductQueryId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductQueryId");

                    b.ToTable("ProductCommentQueries");
                });

            modelBuilder.Entity("SecondaryDB.Domain.ProductPictureQueryAgg.ProductPictureQuery", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("PictureAlt")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPictureQueries");
                });

            modelBuilder.Entity("SecondaryDB.Domain.ProductQueryAgg.ProductQuery", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CustomerDiscountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PictureAlt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PictureTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerDiscountId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("ProductQueries");
                });

            modelBuilder.Entity("SecondaryDB.Domain.ReplayCommentQueryAgg.ProductReplayCommentQuery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ConfirmedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("ProductReplayCommentQueries");
                });

            modelBuilder.Entity("SecondaryDB.Domain.SliderQueryAgg.SliderQuery", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("BodyText")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ButtonText")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Heading")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("PictureAlt")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PictureTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RedirectUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SliderQueries");
                });

            modelBuilder.Entity("SecondaryDB.Domain.InventoryQueryAgg.InventoryOperationQuery", b =>
                {
                    b.HasOne("SecondaryDB.Domain.InventoryQueryAgg.InventoryQuery", "InventoryQuery")
                        .WithMany("InventoryOperationQueries")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecondaryDB.Domain.InventoryQueryAgg.InventoryOperationQuery", null)
                        .WithMany("InventoryOperationQueries")
                        .HasForeignKey("InventoryOperationQueryId");

                    b.Navigation("InventoryQuery");
                });

            modelBuilder.Entity("SecondaryDB.Domain.InventoryQueryAgg.InventoryQuery", b =>
                {
                    b.HasOne("SecondaryDB.Domain.ProductQueryAgg.ProductQuery", "ProductQuery")
                        .WithOne("InventoryQuery")
                        .HasForeignKey("SecondaryDB.Domain.InventoryQueryAgg.InventoryQuery", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductQuery");
                });

            modelBuilder.Entity("SecondaryDB.Domain.ProductCommentQueryAgg.ProductCommentQuery", b =>
                {
                    b.HasOne("SecondaryDB.Domain.ProductQueryAgg.ProductQuery", "ProductQuery")
                        .WithMany("ProductCommentQueries")
                        .HasForeignKey("ProductQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductQuery");
                });

            modelBuilder.Entity("SecondaryDB.Domain.ProductPictureQueryAgg.ProductPictureQuery", b =>
                {
                    b.HasOne("SecondaryDB.Domain.ProductQueryAgg.ProductQuery", "ProductQuery")
                        .WithMany("ProductPictureQueries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductQuery");
                });

            modelBuilder.Entity("SecondaryDB.Domain.ProductQueryAgg.ProductQuery", b =>
                {
                    b.HasOne("SecondaryDB.Domain.CustomerDiscountQueryAgg.CustomerDiscountQuery", "CustomerDiscountQuery")
                        .WithMany("ProductQueries")
                        .HasForeignKey("CustomerDiscountId");

                    b.HasOne("SecondaryDB.Domain.ProductCategoryQueryAgg.ProductCategoryQuery", "ProductCategoryQuery")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerDiscountQuery");

                    b.Navigation("ProductCategoryQuery");
                });

            modelBuilder.Entity("SecondaryDB.Domain.ReplayCommentQueryAgg.ProductReplayCommentQuery", b =>
                {
                    b.HasOne("SecondaryDB.Domain.ProductCommentQueryAgg.ProductCommentQuery", "ProductCommentQuery")
                        .WithMany("ProductReplayCommentQueries")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCommentQuery");
                });

            modelBuilder.Entity("SecondaryDB.Domain.CustomerDiscountQueryAgg.CustomerDiscountQuery", b =>
                {
                    b.Navigation("ProductQueries");
                });

            modelBuilder.Entity("SecondaryDB.Domain.InventoryQueryAgg.InventoryOperationQuery", b =>
                {
                    b.Navigation("InventoryOperationQueries");
                });

            modelBuilder.Entity("SecondaryDB.Domain.InventoryQueryAgg.InventoryQuery", b =>
                {
                    b.Navigation("InventoryOperationQueries");
                });

            modelBuilder.Entity("SecondaryDB.Domain.ProductCategoryQueryAgg.ProductCategoryQuery", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SecondaryDB.Domain.ProductCommentQueryAgg.ProductCommentQuery", b =>
                {
                    b.Navigation("ProductReplayCommentQueries");
                });

            modelBuilder.Entity("SecondaryDB.Domain.ProductQueryAgg.ProductQuery", b =>
                {
                    b.Navigation("InventoryQuery");

                    b.Navigation("ProductCommentQueries");

                    b.Navigation("ProductPictureQueries");
                });
#pragma warning restore 612, 618
        }
    }
}
